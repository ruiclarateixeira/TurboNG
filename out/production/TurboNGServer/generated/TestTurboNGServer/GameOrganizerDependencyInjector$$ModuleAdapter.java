// Code generated by dagger-compiler.  Do not edit.
package TestTurboNGServer;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class GameOrganizerDependencyInjector$$ModuleAdapter extends ModuleAdapter<GameOrganizerDependencyInjector> {
  private static final String[] INJECTS = { "members/TurboNGServer.Game.Game", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public GameOrganizerDependencyInjector$$ModuleAdapter() {
    super(TestTurboNGServer.GameOrganizerDependencyInjector.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public GameOrganizerDependencyInjector newModule() {
    return new TestTurboNGServer.GameOrganizerDependencyInjector();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, GameOrganizerDependencyInjector module) {
    bindings.contributeProvidesBinding("TurboNGServer.Game.Game", new ProvideGameProvidesAdapter(module));
  }

  /**
   * A {@code Binding<TurboNGServer.Game.Game>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<TurboNGServer.Game.Game>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideGameProvidesAdapter extends ProvidesBinding<TurboNGServer.Game.Game>
      implements Provider<TurboNGServer.Game.Game> {
    private final GameOrganizerDependencyInjector module;

    public ProvideGameProvidesAdapter(GameOrganizerDependencyInjector module) {
      super("TurboNGServer.Game.Game", NOT_SINGLETON, "TestTurboNGServer.GameOrganizerDependencyInjector", "provideGame");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<TurboNGServer.Game.Game>}.
     */
    @Override
    public TurboNGServer.Game.Game get() {
      return module.provideGame();
    }
  }
}
