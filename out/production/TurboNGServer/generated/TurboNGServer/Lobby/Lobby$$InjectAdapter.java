// Code generated by dagger-compiler.  Do not edit.
package TurboNGServer.Lobby;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<Lobby>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code Lobby} and its
 * dependencies.
 *
 * Being a {@code Provider<Lobby>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<Lobby>} and handling injection
 * of annotated fields.
 */
public final class Lobby$$InjectAdapter extends Binding<Lobby>
    implements Provider<Lobby>, MembersInjector<Lobby> {
  private Binding<User> user;
  private Binding<NewsFeed> newsFeed;
  private Binding<Chat> chat;

  public Lobby$$InjectAdapter() {
    super("TurboNGServer.Lobby.Lobby", "members/TurboNGServer.Lobby.Lobby", NOT_SINGLETON, Lobby.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    user = (Binding<User>) linker.requestBinding("TurboNGServer.Lobby.User", Lobby.class, getClass().getClassLoader());
    newsFeed = (Binding<NewsFeed>) linker.requestBinding("TurboNGServer.Lobby.NewsFeed", Lobby.class, getClass().getClassLoader());
    chat = (Binding<Chat>) linker.requestBinding("TurboNGServer.Lobby.Chat", Lobby.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(user);
    injectMembersBindings.add(newsFeed);
    injectMembersBindings.add(chat);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Lobby>}.
   */
  @Override
  public Lobby get() {
    Lobby result = new Lobby();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<Lobby>}.
   */
  @Override
  public void injectMembers(Lobby object) {
    object.user = user.get();
    object.newsFeed = newsFeed.get();
    object.chat = chat.get();
  }

}
